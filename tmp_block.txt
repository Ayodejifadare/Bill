    return (
      <Card
        className="p-4 hover:bg-muted/50 transition-colors cursor-pointer"
        onClick={() => {
          if (payment.type === "bill_split" && payment.billSplitId) {
            // Go straight to the payment flow for a bill split
            onNavigate("pay-bill", { billId: payment.billSplitId });
          } else if (payment.type === "request") {
            // Direct request → simplified payment flow
            onNavigate("payment-flow", {
              paymentRequest: {
                id: `upcoming-${payment.id}`,
                amount: payment.amount,
                description: payment.title,
                recipient: payment.organizer.name,
                recipientId: payment.organizer.id ?? payment.organizer.name,
                requestId: payment.requestId || payment.id,
                dueDate: payment.dueDate,
              },
            });
          }
        }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <Avatar className="h-10 w-10">
              <AvatarFallback className="bg-primary text-primary-foreground">
                {payment.organizer.avatar}
              </AvatarFallback>
            </Avatar>
            <div className="flex-1 min-w-0">
              <div className="flex items-center space-x-2 mb-1">
                {getTypeIcon(payment.type)}
                <p className="font-medium truncate">{payment.title}</p>
              </div>
              <p className="text-sm text-muted-foreground">
                {payment.organizer.name} •{" "}
                {Array.isArray(payment.participants)
                  ? payment.participants.length
                  : payment.participants}{" "}
                people
              </p>

              {/* Show payment method info if available */}
              {payment.paymentMethod && (
                <p className="text-xs text-muted-foreground mt-1">
                  {payment.paymentMethod.type === "bank" ? (
                    <>Pay via {payment.paymentMethod.bankName}</>
                  ) : (
                    <>Pay via {payment.paymentMethod.provider}</>
                  )}
                </p>
              )}
            </div>
          </div>
          <div className="text-right space-y-2">
            <p className="font-medium">{fmt(payment.amount)}</p>
            <Badge
              className={`${getStatusColor(payment.status)} text-xs flex items-center gap-1`}
            >
              {getStatusIcon(payment.status)}
              {dueText}
            </Badge>
            <Button
              size="sm"
              variant={
                payment.status === "overdue" || payment.status === "due_soon"
                  ? "default"
                  : "outline"
              }
              className="w-full"
              onClick={(e) => {
                e.stopPropagation();
                if (payment.type === "bill_split" && payment.billSplitId) {
                  onNavigate("pay-bill", { billId: payment.billSplitId });
                } else {
                  // For direct money requests, use the simplified payment flow
                  onNavigate("payment-flow", {
                    paymentRequest: {
                      id: `upcoming-${payment.id}`,
                      amount: payment.amount,
                      description: payment.title,
                      recipient: payment.organizer.name,
                      recipientId:
                        payment.organizer.id ?? payment.organizer.name,
                      // Pass through the underlying request transaction id if present
                      requestId: payment.requestId || payment.id,
                      dueDate: new Date(
                        Date.now() + 24 * 60 * 60 * 1000,
                      ).toISOString(),
                    },
                  });
                }
              }}
            >
              Pay Now
            </Button>
          </div>
        </div>
      </Card>
    );
